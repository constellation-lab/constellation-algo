/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "create_option(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMQpieXRlY2Jsb2NrIDB4NzQ2Zjc0NjE2YzVmNmY3MDc0Njk2ZjZlNzM1ZjZiNjU3OSAweDY3NmM2ZjYyNjE2YzVmNzM3NDYxNzQ2NTVmNmI2NTc5IDB4Njk2ZTY5NzQ2OTYxNmM2OTdhNjU2NCAweDM4MzEzODY0NjYzODM5MzkzMDM5MzgzNjY0MzIzODYxMzUzMDY1MzYzNzMxMzEzMTMwNjUzMjYyMzM2MzY2MzUzNTY0NjU2MzM2NjI2NDYyMzUzMzYyMzE2NjYyMzczNDMxNjUzODYzNjMzMDYyMzQzMDM0MzYzOTY1NjM2NDM3CnR4biBOdW1BcHBBcmdzCmludGNfMCAvLyAwCj09CmJueiBtYWluX2w0CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4N2FlOTUzNmMgLy8gImNyZWF0ZV9vcHRpb24odWludDY0LHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sMwplcnIKbWFpbl9sMzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBjcmVhdGVvcHRpb25jYXN0ZXJfMgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQpibnogbWFpbl9sNgplcnIKbWFpbl9sNjoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKPT0KYXNzZXJ0CmNhbGxzdWIgY3JlYXRlXzAKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBjcmVhdGUKY3JlYXRlXzA6CnByb3RvIDAgMApieXRlY18xIC8vICJnbG9iYWxfc3RhdGVfa2V5IgpieXRlY18yIC8vICJpbml0aWFsaXplZCIKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMCAvLyAidG90YWxfb3B0aW9uc19rZXkiCnB1c2hieXRlcyAweDMwIC8vICIwIgphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIGNyZWF0ZV9vcHRpb24KY3JlYXRlb3B0aW9uXzE6CnByb3RvIDIgMApieXRlY18xIC8vICJnbG9iYWxfc3RhdGVfa2V5IgphcHBfZ2xvYmFsX2dldApieXRlY18yIC8vICJpbml0aWFsaXplZCIKPT0KYXNzZXJ0CmJ5dGVjXzAgLy8gInRvdGFsX29wdGlvbnNfa2V5IgpieXRlY18wIC8vICJ0b3RhbF9vcHRpb25zX2tleSIKYXBwX2dsb2JhbF9nZXQKYnRvaQppbnRjXzEgLy8gMQorCml0b2IKYXBwX2dsb2JhbF9wdXQKcHVzaGJ5dGVzIDB4NmY3MDc0Njk2ZjZlNWY2YzY5NzM3NDVmNmI2NTc5IC8vICJvcHRpb25fbGlzdF9rZXkiCnB1c2hieXRlcyAweDM1NjIzODM2MzUzMjM1NjUzMDMzNjIzMzMwMzczNDM3MzI2MzM3Mzg2NTMxNjM2NDM5MzIzNDMxMzkzNjM3NjIzMzY2MzIzMzM2NjEzNzM5MzIzOTM4MzQzMTM5MzE2MjY2MzIzMjMyMzQ2MzYyMzUzODM2NjU2NDYzNjIzNDM4IC8vIDB4MzU2MjM4MzYzNTMyMzU2NTMwMzM2MjMzMzAzNzM0MzczMjYzMzczODY1MzE2MzY0MzkzMjM0MzEzOTM2Mzc2MjMzNjYzMjMzMzY2MTM3MzkzMjM5MzgzNDMxMzkzMTYyNjYzMjMyMzIzNDYzNjIzNTM4MzY2NTY0NjM2MjM0MzgKYXBwX2dsb2JhbF9wdXQKcHVzaGJ5dGVzIDB4NmY3NzZlNjU3MjVmNmM2OTczNzQ1ZjZiNjU3OSAvLyAib3duZXJfbGlzdF9rZXkiCmJ5dGVjXzMgLy8gMHgzODMxMzg2NDY2MzgzOTM5MzAzOTM4MzY2NDMyMzg2MTM1MzA2NTM2MzczMTMxMzEzMDY1MzI2MjMzNjM2NjM1MzU2NDY1NjMzNjYyNjQ2MjM1MzM2MjMxNjY2MjM3MzQzMTY1Mzg2MzYzMzA2MjM0MzAzNDM2Mzk2NTYzNjQzNwphcHBfZ2xvYmFsX3B1dApwdXNoYnl0ZXMgMHg2MzcyNjU2MTc0NmY3MjVmNmM2OTczNzQ1ZjZiNjU3OSAvLyAiY3JlYXRvcl9saXN0X2tleSIKYnl0ZWNfMyAvLyAweDM4MzEzODY0NjYzODM5MzkzMDM5MzgzNjY0MzIzODYxMzUzMDY1MzYzNzMxMzEzMTMwNjUzMjYyMzM2MzY2MzUzNTY0NjU2MzM2NjI2NDYyMzUzMzYyMzE2NjYyMzczNDMxNjUzODYzNjMzMDYyMzQzMDM0MzYzOTY1NjM2NDM3CmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gY3JlYXRlX29wdGlvbl9jYXN0ZXIKY3JlYXRlb3B0aW9uY2FzdGVyXzI6CnByb3RvIDAgMAppbnRjXzAgLy8gMApkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpidG9pCmZyYW1lX2J1cnkgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmJ0b2kKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAxCmNhbGxzdWIgY3JlYXRlb3B0aW9uXzEKcmV0c3Vi",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 11,
      "num_uints": 6
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 1
    }
  },
  "schema": {
    "global": {
      "declared": {
        "collateral_price": {
          "type": "uint64",
          "key": "collateral_price",
          "descr": ""
        },
        "creator_list_data": {
          "type": "bytes",
          "key": "creator_list_data",
          "descr": ""
        },
        "creator_list_key": {
          "type": "bytes",
          "key": "creator_list_key",
          "descr": ""
        },
        "expires_timestamp": {
          "type": "uint64",
          "key": "expires_timestamp",
          "descr": ""
        },
        "for_sale": {
          "type": "uint64",
          "key": "for_sale",
          "descr": ""
        },
        "global_state_key": {
          "type": "bytes",
          "key": "global_state_key",
          "descr": ""
        },
        "market_list_data": {
          "type": "bytes",
          "key": "market_list_data",
          "descr": ""
        },
        "market_list_key": {
          "type": "bytes",
          "key": "market_list_key",
          "descr": ""
        },
        "new_owner": {
          "type": "bytes",
          "key": "new_owner",
          "descr": ""
        },
        "new_price": {
          "type": "uint64",
          "key": "new_price",
          "descr": ""
        },
        "option_list_data": {
          "type": "bytes",
          "key": "option_list_data",
          "descr": ""
        },
        "option_list_key": {
          "type": "bytes",
          "key": "option_list_key",
          "descr": ""
        },
        "options_id": {
          "type": "uint64",
          "key": "options_id",
          "descr": ""
        },
        "options_quantity": {
          "type": "uint64",
          "key": "options_quantity",
          "descr": ""
        },
        "owner_list_data": {
          "type": "bytes",
          "key": "owner_list_data",
          "descr": ""
        },
        "owner_list_key": {
          "type": "bytes",
          "key": "owner_list_key",
          "descr": ""
        },
        "total_options_key": {
          "type": "bytes",
          "key": "total_options_key",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {
        "claimable_amount": {
          "type": "uint64",
          "key": "claimable_amount",
          "descr": ""
        }
      },
      "reserved": {}
    }
  },
  "contract": {
    "name": "ConstellationDerivative",
    "methods": [
      {
        "name": "create_option",
        "args": [
          {
            "type": "uint64",
            "name": "counter_offer"
          },
          {
            "type": "uint64",
            "name": "expires_timestamp"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the ConstellationDerivative smart contract.
 */
export type ConstellationDerivative = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_option(uint64,uint64)void' | 'create_option', {
      argsObj: {
        counter_offer: bigint | number
        expires_timestamp: bigint | number
      }
      argsTuple: [counter_offer: bigint | number, expires_timestamp: bigint | number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'collateral_price'?: IntegerState
      'creator_list_data'?: BinaryState
      'creator_list_key'?: BinaryState
      'expires_timestamp'?: IntegerState
      'for_sale'?: IntegerState
      'global_state_key'?: BinaryState
      'market_list_data'?: BinaryState
      'market_list_key'?: BinaryState
      'new_owner'?: BinaryState
      'new_price'?: IntegerState
      'option_list_data'?: BinaryState
      'option_list_key'?: BinaryState
      'options_id'?: IntegerState
      'options_quantity'?: IntegerState
      'owner_list_data'?: BinaryState
      'owner_list_key'?: BinaryState
      'total_options_key'?: BinaryState
    }
    local: {
      'claimable_amount'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type ConstellationDerivativeSig = keyof ConstellationDerivative['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ConstellationDerivativeSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the ConstellationDerivative smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ConstellationDerivativeSig> = ConstellationDerivative['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ConstellationDerivative smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ConstellationDerivativeSig> = ConstellationDerivative['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ConstellationDerivativeCreateCalls = (typeof ConstellationDerivativeCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ConstellationDerivativeCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type ConstellationDerivativeDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ConstellationDerivativeCreateCalls) => ConstellationDerivativeCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ConstellationDerivativeCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the ConstellationDerivative smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the create_option(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createOption(args: MethodArgs<'create_option(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_option(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.counter_offer, args.expires_timestamp],
      ...params,
    }
  }
}

/**
 * A client to make calls to the ConstellationDerivative smart contract
 */
export class ConstellationDerivativeClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ConstellationDerivativeClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof ConstellationDerivative['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the ConstellationDerivative smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ConstellationDerivativeDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ConstellationDerivativeCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the ConstellationDerivative smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the ConstellationDerivative smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the create_option(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createOption(args: MethodArgs<'create_option(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ConstellationDerivativeCallFactory.createOption(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<ConstellationDerivative['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get collateral_price() {
        return ConstellationDerivativeClient.getIntegerState(state, 'collateral_price')
      },
      get creator_list_data() {
        return ConstellationDerivativeClient.getBinaryState(state, 'creator_list_data')
      },
      get creator_list_key() {
        return ConstellationDerivativeClient.getBinaryState(state, 'creator_list_key')
      },
      get expires_timestamp() {
        return ConstellationDerivativeClient.getIntegerState(state, 'expires_timestamp')
      },
      get for_sale() {
        return ConstellationDerivativeClient.getIntegerState(state, 'for_sale')
      },
      get global_state_key() {
        return ConstellationDerivativeClient.getBinaryState(state, 'global_state_key')
      },
      get market_list_data() {
        return ConstellationDerivativeClient.getBinaryState(state, 'market_list_data')
      },
      get market_list_key() {
        return ConstellationDerivativeClient.getBinaryState(state, 'market_list_key')
      },
      get new_owner() {
        return ConstellationDerivativeClient.getBinaryState(state, 'new_owner')
      },
      get new_price() {
        return ConstellationDerivativeClient.getIntegerState(state, 'new_price')
      },
      get option_list_data() {
        return ConstellationDerivativeClient.getBinaryState(state, 'option_list_data')
      },
      get option_list_key() {
        return ConstellationDerivativeClient.getBinaryState(state, 'option_list_key')
      },
      get options_id() {
        return ConstellationDerivativeClient.getIntegerState(state, 'options_id')
      },
      get options_quantity() {
        return ConstellationDerivativeClient.getIntegerState(state, 'options_quantity')
      },
      get owner_list_data() {
        return ConstellationDerivativeClient.getBinaryState(state, 'owner_list_data')
      },
      get owner_list_key() {
        return ConstellationDerivativeClient.getBinaryState(state, 'owner_list_key')
      },
      get total_options_key() {
        return ConstellationDerivativeClient.getBinaryState(state, 'total_options_key')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<ConstellationDerivative['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get claimable_amount() {
        return ConstellationDerivativeClient.getIntegerState(state, 'claimable_amount')
      },
    }
  }

  public compose(): ConstellationDerivativeComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createOption(args: MethodArgs<'create_option(uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createOption(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ConstellationDerivativeComposer
  }
}
export type ConstellationDerivativeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_option(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createOption(args: MethodArgs<'create_option(uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ConstellationDerivativeComposer<[...TReturns, MethodReturn<'create_option(uint64,uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the ConstellationDerivative smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): ConstellationDerivativeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ConstellationDerivativeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<ConstellationDerivativeComposerResults<TReturns>>
}
export type ConstellationDerivativeComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
